<?php

namespace App\Commands;

use Illuminate\Support\Str;
use Symfony\Component\Yaml\Yaml;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\View;
use App\Repository\ConfigRepository;
use Illuminate\Support\Facades\Config;
use LaravelZero\Framework\Commands\Command;

class InitCommand extends Command
{
    /**
     * The signature of the command.
     *
     * @var string
     */
    protected $signature = 'init {init-file : Init configuration file} {--extend-file=} {--config-file=}';

    /**
     * The description of the command.
     *
     * @var string
     */
    protected $description = 'Initialize container configuration';

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $config = new ConfigRepository(
            $this->argument('init-file')
        );

        foreach (explode(',', $this->option('extend-file')) as $overrideFile) {
            if (file_exists($overrideFile)) {
                $this->line("Load $overrideFile");
                $config->merge(Yaml::parseFile($overrideFile));
            }
        }

        foreach (explode(',', $this->option('config-file')) as $varsFile) {
            if (file_exists($varsFile)) {
                $this->line("Load $varsFile");
                $config->merge([
                    'variables' => Yaml::parseFile($varsFile)
                ]);
            }
        }

        $config->validate([
            'templates' => ['array'],
            'templates.*.name' => ['required', 'string'],
            'templates.*.destination' => ['required', 'string'],
            'variables' => ['array'],
            'rules' => ['array']
        ]);

        foreach ($config->get('variables', []) as $varKey => $varValue) {
            $envKey = Str::upper(Str::snake($varKey));
            $config->merge([
                'variables' => [
                    $varKey => env($envKey, $varValue)
                ]
            ]);
        }

        $config->validate(
            $config->get('rules', []),
            'variables'
        );

        foreach ($config->get('templates', []) as $template) {
            $this->task("Generate {$template['name']} template", function () use ($config, $template) {
                $destDir = dirname($config->getPath($template['destination']));

                if (!File::exists($destDir)) {
                    File::makeDirectory($destDir, 0766, true);
                }

                Config::set('view.paths', [
                    $config->getPath('./templates')
                ]);

                File::put(
                    $config->getPath($template['destination']),
                    View::make(
                        $template['name'],
                        $config->get('variables', []),
                        [
                            'generated_at' => date('Y-m-d H:i:s'),
                            'generated_by' => 'Generated by Container CLI on ' . date('Y-m-d H:i:s')
                        ]
                    )->render()
                );
            });
        }
    }
}
